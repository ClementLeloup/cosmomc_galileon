#Fichier d'input contenant un certain nombre de paramètres techniques concernant l'exécution du code cosmomc. Il est inclus dans les différents .ini présents dans ini_files/. 

#Temperature at which to Monte-Carlo
temperature = 1

#whether to stop on CAMB error, or continue ignoring point
stop_on_error=  T

#Increase to oversample fast parameters,e.g. if space is odd shape
oversample_fast = 1

#Can use covariance matrix for proposal density, otherwise use settings below
#Covariance matrix can be produced using "getdist" prorgram.
propose_matrix = 

#If large difference in log likelihoods may need to offset to give sensible weights
#for exp(difference in likelihoods)
redo_likeoffset =  0

#if action =2 : bestfit

#when estimating best fit point (action=2 or estimate_propose_matrix), 
#required relative accuracy of each parameter in units of the covariance width
max_like_radius = 0.05
max_like_iterations = 5000
minimization_points_factor = 2
minimize_loglike_tolerance = 0.05
minimize_separate_fast = T
#if non-zero do some low temperature MCMC steps to check minimum stable
minimize_mcmc_refine_num = 20
minimize_refine_temp = 0.01
minimize_temp_scale_factor = 5
minimize_random_start_pos = T


#MPI mode multi-chain options (recommended)
#MPI_Converge_Stop is a (variance of chain means)/(mean of variances) parameter that can be used to stop the chains
#Set to a negative number not to use this feature. Does not guarantee good accuracy of confidence limits.
MPI_Converge_Stop = 0.03
#if MPI_LearnPropose = T, the proposal density is continally updated from the covariance of samples so far (since burn in)
MPI_LearnPropose = T

#can set a value of converge at which to stop updating covariance (so that it becomes rigorously Markovian)
#e.g. MPI_R_StopProposeUpdate = 0.4 will stop updating when (variance of chain means)/(mean of variances) < 0.4
MPI_R_StopProposeUpdate = 0

#Can optionally also check for convergence of confidence limits (after MPI_Converge_Stop  reached)
MPI_Check_Limit_Converge = F

#if MPI_Check_Limit_Converge = T, give tail fraction to check (checks both tails):
MPI_Limit_Converge = 0.025
#And the permitted percentil chain variance in units of the standard deviation (small values v slow):
MPI_Limit_Converge_Err = 0.3
#which parameter's tails to check. If zero, check all parameters:
MPI_Limit_Param = 0

#Do initial period of slice sampling; may be good idea if 
#cov matrix or widths are likely to be very poor estimates
MPI_StartSliceSampling  = F

#If have covmat, R to reach before updating proposal density (increase if covmat likely to be poor)
#Only used if not varying new parameters that are fixed in covmat
MPI_Max_R_ProposeUpdate = 2
#As above, but used if varying new parameters that were fixed in covmat
MPI_Max_R_ProposeUpdateNew = 30

#if blank this is set from system clock
rand_seed = 


###CAMB --- anciennement isssus majoritairement de batch1/params_CMB_defaults.ini

#CAMB parameters
#If we are including tensors
compute_tensors = F
#If using tensors, enforce n_T = -A_T/(8A_s)
inflation_consistency = T


#Set Y_He from BBN constraint; if false set to fixed value of 0.24 by default.
bbn_consistency=T 


#file used by CAMB
highL_unlensed_cl_template = camb/HighLExtrapTemplate_lenspotentialCls.dat

#defining l_max for actual calculation, and higher L template file
highL_theory_cl_template = %DATASETDIR%HighL_lensedCls.dat


###Autres paramètres issus de common_batch 1, considérés comme "fairly irrelevant"


#if sampling_method =4, iterations per gridded direction
directional_grid_steps = 20


####Deux lignes anciennement tirées de batch1/likelihood_batch1.ini
#filenames for matter power spectrum datasets, incl twodf
mpk_numdatasets = 1
mpk_dataset1 = %DATASETDIR%sdss_lrgDR4.dataset
#if true, use HALOFIT for non-linear corrections (astro-ph/0207664).
#note lyman-alpha (lya) code assumes linear spectrum
nonlinear_pk = F